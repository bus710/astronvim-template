{
    "setup":{
        "prefix": ["app.gleam with simple"],
        "description": "app.gleam with simple for lustre",
        "body":[
            "import gleam/int",
            "import lustre as ls",
            "import lustre/attribute as attr",
            "import lustre/element.{type Element}",
            "import lustre/element/html as ht",
            "import lustre/event",
            "",
            "pub fn main() {",
            "  let app = ls.simple(init, update, view)",
            "  let assert Ok(_) = ls.start(app, \"#app\", Nil)",
            "",
            "  Nil",
            "}",
            "",
            "type Model =",
            "  Int",
            "",
            "fn init(_) -> Model {",
            "  0",
            "}",
            "",
            "type Msg {",
            "  UserClickedIncrement",
            "  UserClickedDecrement",
            "}",
            "",
            "fn update(model: Model, msg: Msg) -> Model {",
            "  case msg {",
            "    UserClickedIncrement -> model + 1",
            "    UserClickedDecrement -> model - 1",
            "  }",
            "}",
            "",
            "fn view(model: Model) -> Element(Msg) {",
            "  ht.div(",
            "    [attr.class(\"h-screen flex flex-col justify-center items-center\")],",
            "    [",
            "      ht.button([event.on_click(UserClickedDecrement)], [ht.text(\"-\")]),",
            "      ht.p(",
            "        [",
            "          attr.class(\"my-4\"),",
            "          case model > 3 {",
            "            True -> attr.class(\"text-red-800 font-bold\")",
            "            False -> attr.none()",
            "          },",
            "        ],",
            "        [ht.text(\"Count: \"), ht.text(int.to_string(model))],",
            "      ),",
            "      ht.button([event.on_click(UserClickedIncrement)], [ht.text(\"+\")]),",
            "    ],",
            "  )",
            "}"
        ]
    }
}

