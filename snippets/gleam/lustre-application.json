{
    "setup":{
        "prefix": ["luster app"],
        "description": "app.gleam with application for lustre",
        "body":[
            "// https://hexdocs.pm/lustre/lustre.html#application",
            "",
            "import gleam/int",
            "import lustre as ls",
            "import lustre/attribute as attr",
            "import lustre/effect.{type Effect}",
            "import lustre/element.{type Element}",
            "import lustre/element/html as ht",
            "import lustre/event as ev",
            "",
            "pub fn main() {",
            "  let app = ls.application(init, update, view)",
            "  let assert Ok(_) = ls.start(app, \"#app\", Nil)",
            "",
            "  Nil",
            "}",
            "",
            "type Model {",
            "  Model(total: Int, total_string: String)",
            "}",
            "",
            "fn init(_) -> #(Model, Effect(Msg)) {",
            "  let model = Model(total: 0, total_string: \"0\")",
            "  #(model, effect.none())",
            "}",
            "",
            "type Msg {",
            "  UserClickedIncrement",
            "  UserClickedDecrement",
            "}",
            "",
            "fn update(model: Model, msg: Msg) -> #(Model, Effect(Msg)) {",
            "  case msg {",
            "    UserClickedIncrement -> #(",
            "    Model(model.total + 1, int.to_string(model.total + 1)),",
            "    effect.none(),",
            "    )",
            "    UserClickedDecrement -> #(",
            "    Model(model.total - 1, int.to_string(model.total - 1)),",
            "    effect.none(),",
            "    )",
            "  }",
            "}",
            "",
            "fn view(model: Model) -> Element(Msg) {",
            "  ht.div([attr.class(\"h-screen flex flex-col justify-center items-center\")], [",
            "    ht.button([ev.on_click(UserClickedDecrement)], [ht.text(\"-\")]),",
            "    ht.p(",
            "    [",
            "        attr.class(\"my-4\"),",
            "        case model.total > 3 {",
            "        True -> attr.class(\"text-red-800 font-bold\")",
            "        False -> attr.none()",
            "        },",
            "    ],",
            "    [ht.text(\"Count: \"), ht.text(int.to_string(model.total))],",
            "    ),",
            "    ht.button([ev.on_click(UserClickedIncrement)], [ht.text(\"+\")]),",
            "])",
            "}"
        ]
    }
}

